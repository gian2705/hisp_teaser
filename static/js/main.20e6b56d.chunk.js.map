{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CompleteTable","cols","rows","Table","striped","bordered","hover","map","col","row","data","getColumns","tableType","placeValues","metaData","dimensions","ou","dataValues","dx","value","names","getRows","rowValues","i","val","filter","v","App","Container","Row","Col","sm","style","color","center","span","offset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQASA,SAASA,EAAT,GAAsC,IAAdC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,KAC1B,OACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCAEIL,EAAKM,KAAI,SAAAC,GAAG,OACR,6BAAKA,SAIb,gCAEIN,EAAKK,KAAI,SAAAE,GAAG,OAAK,6BAETA,EAAIF,KAAI,SAAAG,GAAI,OAAK,6BACZA,iBAU7B,SAASC,EAAWC,GAChB,IAAMC,EAAcH,EAAKI,SAASC,WAAWC,GACvCC,EAAaP,EAAKI,SAASC,WAAWG,GAE5C,MAAkB,gBAAdN,EACM,CAAE,iBAAR,mBAA4BK,EAAWV,KAAI,SAAAY,GAAK,OAAIT,EAAKI,SAASM,MAAMD,QAExE,CAAQ,iBAAR,mBAA4BN,EAAYN,KAAI,SAAAY,GAAK,OAAIT,EAAKI,SAASM,MAAMD,QAQjF,SAASE,EAAQT,GACb,IAAMU,EAAYZ,EAAKR,KACjBW,EAAcH,EAAKI,SAASC,WAAWC,GACvCC,EAAaP,EAAKI,SAASC,WAAWG,GAE5C,MAAkB,gBAAdN,EACOC,EAAYN,KAAI,SAACY,EAAOI,GAAR,OAAeb,EAAKI,SAASM,MAAMD,IAAnC,mBAA8CF,EAAWV,KAAI,SAAAiB,GAChF,OAAOF,EAAUG,QAAO,SAAAC,GAAC,OAAIA,EAAE,KAAOF,KAAKD,GAAG,WAG3CN,EAAWV,KAAI,SAACY,EAAOI,GAAR,OAAeb,EAAKI,SAASM,MAAMD,IAAnC,mBAA8CN,EAAYN,KAAI,SAAAiB,GAChF,OAAOF,EAAUG,QAAO,SAAAC,GAAC,OAAIA,EAAE,KAAOF,KAAKD,GAAG,WAgC3CI,MA5Bf,WACI,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,oBAAIC,MAAO,CAACC,MAAO,WAAnB,6BAGR,eAACJ,EAAA,EAAD,CAAKK,QAAM,EAAX,UACI,cAACJ,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,2CAEJ,cAACD,EAAA,EAAD,CAAKC,GAAI,CAACI,KAAM,EAAGC,OAAQ,GAA3B,SACI,cAACpC,EAAD,CAAeC,KAAMU,EAAW,eAAgBT,KAAMmB,EAAQ,sBAGtE,eAACQ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,2CAEJ,cAACD,EAAA,EAAD,CAAKC,GAAI,CAACI,KAAM,EAAGC,OAAQ,GAA3B,SACI,cAACpC,EAAD,CAAeC,KAAMU,EAAW,eAAgBT,KAAMmB,EAAQ,0BCzEnEgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.20e6b56d.chunk.js","sourcesContent":["import './App.css';\nimport Container from \"react-bootstrap/Container\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport data from './data.json'\n\n\nfunction CompleteTable({cols, rows}) {\n    return (\n        <Table striped bordered hover>\n            <thead>\n            {\n                cols.map(col => (\n                    <th>{col}</th>\n                ))\n            }\n            </thead>\n            <tbody>\n            {\n                rows.map(row => (<tr>\n                    {\n                        row.map(data => (<td>\n                            {data}\n                        </td>))\n                    }\n                </tr>))\n            }\n            </tbody>\n        </Table>\n    )\n}\n\nfunction getColumns(tableType) {\n    const placeValues = data.metaData.dimensions.ou;\n    const dataValues = data.metaData.dimensions.dx;\n\n    if (tableType === 'dataVsPlace')\n        return ['Data vs Place', ...dataValues.map(value => data.metaData.names[value])]\n    else\n        return ['Place vs Data', ...placeValues.map(value => data.metaData.names[value])]\n}\n/*\n* To get rows, determine which header should be on the row side then loop through it, first element will be\n* the header's name. To get the rest of the elements loop through the column header and get the values for\n* each column\n*   */\n\nfunction getRows(tableType) {\n    const rowValues = data.rows;\n    const placeValues = data.metaData.dimensions.ou;\n    const dataValues = data.metaData.dimensions.dx;\n\n    if (tableType === 'dataVsPlace')\n        return placeValues.map((value, i) => [data.metaData.names[value], ...dataValues.map(val => {\n            return rowValues.filter(v => v[0] === val)[i][2]\n        })])\n    else\n        return dataValues.map((value, i) => [data.metaData.names[value], ...placeValues.map(val => {\n            return rowValues.filter(v => v[1] === val)[i][2]\n        })])\n}\n\nfunction App() {\n    return (\n        <Container>\n            <Row>\n                <Col sm={12}>\n                    <h1 style={{color: '#389DE0'}}>HISP Teaser</h1>\n                </Col>\n            </Row>\n            <Row center>\n                <Col sm={12}>\n                    <h2>Table 1</h2>\n                </Col>\n                <Col sm={{span: 8, offset: 2}} >\n                    <CompleteTable cols={getColumns('placeVsData')} rows={getRows('placeVsData')}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <h2>Table 2</h2>\n                </Col>\n                <Col sm={{span: 8, offset: 2}}>\n                    <CompleteTable cols={getColumns('dataVsPlace')} rows={getRows('dataVsPlace')}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}